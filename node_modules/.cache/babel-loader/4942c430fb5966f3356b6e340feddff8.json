{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport firebaseInIt from \"../../Firebase/firebase.init.js\";\nimport { getAuth, signInWithEmailAndPassword, signInWithPopup, GoogleAuthProvider, updateProfile, signOut, createUserWithEmailAndPassword } from \"firebase/auth\";\nimport { useState } from \"react\";\nfirebaseInIt();\n\nconst useFirebase = () => {\n  _s();\n\n  const [newUser, setNewUser] = useState({});\n  const [user, setUser] = useState({});\n  const [error, setError] = useState('');\n  const auth = getAuth();\n  const googleProvider = new GoogleAuthProvider();\n\n  function googleSignIn() {\n    signInWithPopup(auth, googleProvider).then(result => {\n      const user = result.user;\n      setUser(user);\n    }).catch(err => setError(err.message));\n  } //email-pass\n\n\n  function registerUser() {\n    createUserWithEmailAndPassword(auth, newUser.email, newUser.password).then(result => {\n      setUserDisplayName();\n      setNewUser({});\n    }).catch(error => setError(error.message));\n  } //login\n\n\n  function login() {\n    signInWithEmailAndPassword(aut);\n  } //set user name and photo url\n\n\n  function setUserDisplayName() {\n    updateProfile(auth.currentUser, {\n      displayName: newUser.name,\n      photoURL: newUser.photoURL\n    }).then(() => {}).catch(error => {\n      setError(error.message);\n    });\n  } //logout\n\n\n  function logout() {\n    signOut(auth).then(() => setUser({})).catch(err => setError(err.message));\n  }\n\n  return {\n    googleSignIn,\n    user,\n    error,\n    logout,\n    newUser,\n    setNewUser,\n    registerUser\n  };\n};\n\n_s(useFirebase, \"P1zVbbIOxcjOgqptUPRZSiV2vgo=\");\n\nexport default useFirebase;","map":{"version":3,"sources":["C:/project/garaz-client/src/Components/hooks/useFirebase.js"],"names":["firebaseInIt","getAuth","signInWithEmailAndPassword","signInWithPopup","GoogleAuthProvider","updateProfile","signOut","createUserWithEmailAndPassword","useState","useFirebase","newUser","setNewUser","user","setUser","error","setError","auth","googleProvider","googleSignIn","then","result","catch","err","message","registerUser","email","password","setUserDisplayName","login","aut","currentUser","displayName","name","photoURL","logout"],"mappings":";;AAAA,OAAOA,YAAP,MAAyB,iCAAzB;AACA,SAASC,OAAT,EAAiBC,0BAAjB,EAA4CC,eAA5C,EAA4DC,kBAA5D,EAA+EC,aAA/E,EAA6FC,OAA7F,EAAqGC,8BAArG,QAA0I,eAA1I;AACA,SAASC,QAAT,QAAyB,OAAzB;AAEAR,YAAY;;AACZ,MAAMS,WAAW,GAAG,MAAM;AAAA;;AACtB,QAAM,CAACC,OAAD,EAAUC,UAAV,IAAwBH,QAAQ,CAAC,EAAD,CAAtC;AACA,QAAM,CAACI,IAAD,EAAOC,OAAP,IAAkBL,QAAQ,CAAC,EAAD,CAAhC;AACA,QAAK,CAACM,KAAD,EAAOC,QAAP,IAAiBP,QAAQ,CAAC,EAAD,CAA9B;AACA,QAAMQ,IAAI,GAAGf,OAAO,EAApB;AACA,QAAMgB,cAAc,GAAG,IAAIb,kBAAJ,EAAvB;;AAEA,WAASc,YAAT,GAAwB;AACpBf,IAAAA,eAAe,CAACa,IAAD,EAAOC,cAAP,CAAf,CACKE,IADL,CACUC,MAAM,IAAI;AACZ,YAAMR,IAAI,GAAGQ,MAAM,CAACR,IAApB;AACAC,MAAAA,OAAO,CAACD,IAAD,CAAP;AACH,KAJL,EAKCS,KALD,CAKOC,GAAG,IAAEP,QAAQ,CAACO,GAAG,CAACC,OAAL,CALpB;AAMH,GAdqB,CAgBtB;;;AACA,WAASC,YAAT,GAAwB;AACpBjB,IAAAA,8BAA8B,CAACS,IAAD,EAAON,OAAO,CAACe,KAAf,EAAsBf,OAAO,CAACgB,QAA9B,CAA9B,CACKP,IADL,CACUC,MAAM,IAAI;AACZO,MAAAA,kBAAkB;AAClBhB,MAAAA,UAAU,CAAC,EAAD,CAAV;AACH,KAJL,EAKCU,KALD,CAKOP,KAAK,IAAEC,QAAQ,CAACD,KAAK,CAACS,OAAP,CALtB;AAMH,GAxBqB,CA0B1B;;;AACI,WAASK,KAAT,GAAiB;AACb1B,IAAAA,0BAA0B,CAAC2B,GAAD,CAA1B;AACH,GA7BqB,CA8BtB;;;AACA,WAASF,kBAAT,GAA8B;AAC1BtB,IAAAA,aAAa,CAACW,IAAI,CAACc,WAAN,EAAmB;AAC5BC,MAAAA,WAAW,EAAErB,OAAO,CAACsB,IADO;AAE5BC,MAAAA,QAAQ,EAACvB,OAAO,CAACuB;AAFW,KAAnB,CAAb,CAIKd,IAJL,CAIU,MAAM,CAAG,CAJnB,EAKKE,KALL,CAKWP,KAAK,IAAI;AAChBC,MAAAA,QAAQ,CAACD,KAAK,CAACS,OAAP,CAAR;AACH,KAPD;AAQH,GAxCqB,CAyCtB;;;AACA,WAASW,MAAT,GAAkB;AACd5B,IAAAA,OAAO,CAACU,IAAD,CAAP,CACKG,IADL,CACU,MAAIN,OAAO,CAAC,EAAD,CADrB,EAECQ,KAFD,CAEOC,GAAG,IAAEP,QAAQ,CAACO,GAAG,CAACC,OAAL,CAFpB;AAGH;;AAED,SAAO;AACHL,IAAAA,YADG;AAEHN,IAAAA,IAFG;AAEGE,IAAAA,KAFH;AAGHoB,IAAAA,MAHG;AAIHxB,IAAAA,OAJG;AAIMC,IAAAA,UAJN;AAKHa,IAAAA;AALG,GAAP;AAOH,CAvDD;;GAAMf,W;;AAyDN,eAAeA,WAAf","sourcesContent":["import firebaseInIt from \"../../Firebase/firebase.init.js\";\r\nimport { getAuth,signInWithEmailAndPassword,signInWithPopup,GoogleAuthProvider,updateProfile,signOut,createUserWithEmailAndPassword} from \"firebase/auth\";\r\nimport { useState } from \"react\";\r\n\r\nfirebaseInIt();\r\nconst useFirebase = () => {\r\n    const [newUser, setNewUser] = useState({})\r\n    const [user, setUser] = useState({});\r\n    const[error,setError]=useState('')\r\n    const auth = getAuth();\r\n    const googleProvider = new GoogleAuthProvider();\r\n\r\n    function googleSignIn() {\r\n        signInWithPopup(auth, googleProvider)\r\n            .then(result => {\r\n                const user = result.user;\r\n                setUser(user);\r\n            })\r\n        .catch(err=>setError(err.message))\r\n    }\r\n\r\n    //email-pass\r\n    function registerUser() {\r\n        createUserWithEmailAndPassword(auth, newUser.email, newUser.password)\r\n            .then(result => {\r\n                setUserDisplayName();\r\n                setNewUser({})\r\n            })\r\n        .catch(error=>setError(error.message))\r\n    }\r\n\r\n//login\r\n    function login() {\r\n        signInWithEmailAndPassword(aut)\r\n    }\r\n    //set user name and photo url\r\n    function setUserDisplayName() {\r\n        updateProfile(auth.currentUser, {\r\n            displayName: newUser.name,\r\n            photoURL:newUser.photoURL\r\n        })\r\n            .then(() => { })\r\n            .catch(error => {\r\n            setError(error.message)\r\n        })\r\n    }\r\n    //logout\r\n    function logout() {\r\n        signOut(auth)\r\n            .then(()=>setUser({}))\r\n        .catch(err=>setError(err.message))\r\n    }\r\n\r\n    return {\r\n        googleSignIn,\r\n        user, error,\r\n        logout,\r\n        newUser, setNewUser,\r\n        registerUser\r\n}\r\n};\r\n\r\nexport default useFirebase;"]},"metadata":{},"sourceType":"module"}